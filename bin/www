#!/usr/bin/env node

/**
 * Module dependencies.
 */

const app = require('../app');
const debug = require('debug')('node-express-seed:server');
const http = require('http');
const ws = require('nodejs-websocket');
const WsCommands = require('../lib/ws.commands.class')

let WSServer = ws.createServer(function (conn) {
  console.log("New connection", conn.path);
  conn.on("text", function (str) {
    //TODO: eval is security risk!
    if (str[0] === str[str.length - 1] && str[0] === '"')
    { //To reduce risk of 'eval'
      let obj = JSON.parse(eval(str));
      if (obj.cmd) {
        let wsc = new WsCommands(WSServer.connections);
        if (wsc[obj.cmd] && typeof wsc[obj.cmd] === 'function') {
          wsc[obj.cmd](obj);
        }
        else {
          console.log('Socket: non-existent command: ', obj.cmd)
        }
      }
      else {
        console.log('Socket: bad object: ', obj)
      }
    }
    // else {
    //   console.log('Socket: bad string: ', str)
    // }
  });
  conn.on("close", function (code, reason) {
    console.log("Connection closed", code, reason)
  });
  conn.on("error", err => console.log('socket error', err));
}).listen(3001);

/**
 * Get port from environment and store in Express.
 */

let port = normalizePort(process.env.PORT || '3000');
app.set('port', port);
app.locals.WSServer = WSServer;
/**
 * Create HTTP server.
 */

let server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  let port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  let bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  let addr = server.address();
  let bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
