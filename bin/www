#!/usr/bin/env node

/**
 * Module dependencies.
 */

/*************************/
/*
//var http = require('http').Server(app);
//var io = require('socket.io')(http);
//var app = require('express')();
var app = require('../app');
//var debug = require('debug')('matab-s:server');
var http = require('http');
var server = http.createServer(app);
var io = require('socket.io')(server);

// Will trigger the provided callback function when a matching event is received
io.on('connection', function(socket)
{
    console.log('user connected');

    //Start listening for server-sent events from Sails with the specified eventIdentity. Will trigger the provided callback function when a matching event is received
    socket.on('disconnect', function(){
        console.log('user disconnected');
    });

    socket.emit('pageInfoMsg',{N:1,P:2});

    // socket.on('doctor', function(message){
    //   console.log('doctor!');
    //   io.emit('pageInfoMsg',{N:1, P:2});
    // });

    // socket.on('get-message', function(message){
    //       console.log('addmmm!');
    //       io.emit('message', {type:'new-message', text: "test"});
    // });

// socket.emit('pageInfoMsg',msg, function (data) {
//
//     console.log("fsfsfs!");
//     console.log(msg);
//
// });


// socket.on('pageInfoMsg', function(message,myfn) {
//   console.log("pageInfoMsg!!");
//   console.log(message.nid);
//   myfn("serverData!!");
//     //io.emit('message', {type:'new-message', text: message});
// });

});

*/







var app = require('../app');///
var debug = require('debug')('node-express-seed:server');
var http = require('http');///

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);///

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
